# Modificamos la forma de los datos (a "más cuadrado")
spread(CategoriaEconomicaNombre, `Número de UFs`)
Resumen_UnidadFiscalizable_cuadro
Resumen_UnidadFiscalizable_reg <-
# datos originales
Resumen_UnidadFiscalizable %>%
# seleccionamos cuatro variables/columnas
select(UnidadFiscalizableId, Nombre, RegionNombre, CategoriaEconomicaNombre) %>%
# dejamos solo aquellas observaciones/filas que no tienen valores nulos para RegionNombre ni CategoriaEconomicaNombre
filter(!is.na(RegionNombre) & !is.na(CategoriaEconomicaNombre)) %>%
# Agrupamos las observaciones/filas respecto a las variables RegionNombre y CategoriaEconomicaNombre
group_by(RegionNombre, CategoriaEconomicaNombre) %>%
# Calculamos el número de filas/observaciones para cada uno de los grupos
summarise("Número de UFs" = n())
Resumen_UnidadFiscalizable_reg <-
# datos originales
Resumen_UnidadFiscalizable %>%
# seleccionamos cuatro variables/columnas
select(UnidadFiscalizableId, RegionNombre, CategoriaEconomicaNombre) %>%
# dejamos solo aquellas observaciones/filas que no tienen valores nulos para RegionNombre ni CategoriaEconomicaNombre
filter(!is.na(RegionNombre) & !is.na(CategoriaEconomicaNombre)) %>%
# Agrupamos las observaciones/filas respecto a las variables RegionNombre y CategoriaEconomicaNombre
group_by(RegionNombre, CategoriaEconomicaNombre) %>%
# Calculamos el número de filas/observaciones para cada uno de los grupos
summarise("Número de UFs" = n())
library(ggplot2)
Resumen_UnidadFiscalizable_reg %>%
ggplot(aes(RegionNombre, `Número de UFs`)) +
geom_col() +
coord_flip() +
xlab("") +
ylab("")
integer <- 2
float <- 3.14
factor <- as.factor("M")
class(integer)
integer %>% str
source("Scripts/CargarLibrerias.R", encoding = "UTF-8")
source("Scripts/CargaDatos.R", encoding = "UTF-8")
openxlsx::write.xlsx("../Datos/Datos_Instrumento.xlsx")
openxlsx::write.xlsx(Datos_Instrumento,"../Datos/Datos_Instrumento.xlsx")
openxlsx::write.xlsx(Datos_Sancion,"../Datos/Datos_Sancion.xlsx")
openxlsx::write.xlsx(Detalle_ProcesoSancionUnidadFiscalizable,"../Datos/Detalle_ProcesoSancionUnidadFiscalizable2.xlsx")
source("Scripts/CargaDatos.R", encoding = "UTF-8")
Datos_Sancion <-
Resumen_ProcesoSancion %>%
left_join(Detalle_ProcesoSancionUnidadFiscalizable, by = "ProcesoSancionId")
openxlsx::write.xlsx(Datos_Sancion,"../Datos/Datos_Sancion.xlsx")
openxlsx::write.xlsx(Resumen_UnidadFiscalizable,"../Datos/Resumen_UnidadFiscalizable2.xlsx")
rm(list = ls())
source('~/GitHub/Reportes-automaticos/Reporte Automático/Scripts/CargaDatos.R')
# Crear función de reporte
imprimir_reporte <- function(region) {
rmarkdown::render(
"Reporte Automático/ReportePorRegion.Rmd",
params = list(
reg = region
),
encoding = "UTF-8",
output_file = paste0("Reporte_", region, "_", format(Sys.Date(), "%d%m%Y"), ".docx")
)
filesstrings::file.move(paste0("Reporte Automático/Reporte_", region, "_", format(Sys.Date(), "%d%m%Y"), ".docx"),
"Reporte Automático/Reportes por región/")
}
#Opciones
regiones <- c("Tarapacá"
, "Antofagasta"
, "Atacama"
, "Coquimbo"
, "O'Higgins"
, "Valparaíso"
, "Maule"
, "Biobío"
, "Araucanía"
, "Lagos"
, "Aysén"
, "Magallanes"
, "Metropolitana"
, "Ríos"
, "Arica"
, "Ñuble")
for (i in regiones){
imprimir_reporte(i)
}
rmarkdown::render(
"ReportePorRegion.Rmd",
params = list(
reg = region
),
encoding = "UTF-8",
output_file = paste0("Reporte_", region, "_", format(Sys.Date(), "%d%m%Y"), ".docx")
)
# Crear función de reporte
imprimir_reporte <- function(region) {
rmarkdown::render(
"ReportePorRegion.Rmd",
params = list(
reg = region
),
encoding = "UTF-8",
output_file = paste0("Reporte_", region, "_", format(Sys.Date(), "%d%m%Y"), ".docx")
)
filesstrings::file.move(paste0("Reporte Automático/Reporte_", region, "_", format(Sys.Date(), "%d%m%Y"), ".docx"),
"Reporte Automático/Reportes por región/")
}
# Crear función de reporte
imprimir_reporte <- function(region) {
rmarkdown::render(
"ReportePorRegion.Rmd",
params = list(
reg = region
),
encoding = "UTF-8",
output_file = paste0("Reporte_", region, "_", format(Sys.Date(), "%d%m%Y"), ".docx")
)
filesstrings::file.move(paste0("Reporte Automático/Reporte_", region, "_", format(Sys.Date(), "%d%m%Y"), ".docx"),
"Reporte Automático/Reportes por región/")
}
imprimir_reporte("Araucanía")
rmarkdown::render(
"ReportePorRegion.Rmd",
params = list(
reg = "Araucanía"
),
encoding = "UTF-8",
output_file = paste0("Reporte_", region, "_", format(Sys.Date(), "%d%m%Y"), ".docx")
)
rmarkdown::render(
"ReportePorRegion.Rmd",
params = list(
reg = "Araucanía"
),
encoding = "UTF-8",
output_file = paste0("Reporte_", "Araucanía", "_", format(Sys.Date(), "%d%m%Y"), ".docx")
)
rmarkdown::render(
"ReportePorRegion.Rmd",
params = list(
reg = "Araucanía"
),
encoding = "UTF-8",
output_file = paste0("Reporte_", "Araucanía", "_", format(Sys.Date(), "%d%m%Y"), ".docx")
)
filesstrings::file.move(paste0("Reporte Automático/Reporte_", region, "_", format(Sys.Date(), "%d%m%Y"), ".docx"),
"Reporte Automático/Reportes por región/")
install.packages("filesstrings")
filesstrings::file.move(paste0("Reporte Automático/Reporte_", region, "_", format(Sys.Date(), "%d%m%Y"), ".docx"),
"Reporte Automático/Reportes por región/")
filesstrings::file.move(paste0("Reporte Automático/Reporte_", "Araucanía", "_", format(Sys.Date(), "%d%m%Y"), ".docx"),
"Reporte Automático/Reportes por región/")
filesstrings::file.move(paste0("Reporte_", "Araucanía", "_", format(Sys.Date(), "%d%m%Y"), ".docx"),
"Reporte Automático/Reportes por región/")
paste0("Reporte_", "Araucanía", "_", format(Sys.Date(), "%d%m%Y"), ".docx")
filesstrings::file.move(paste0("Reporte_", "Araucanía", "_", format(Sys.Date(), "%d%m%Y"), ".docx"),
"Reportes por región/")
# Crear función de reporte
imprimir_reporte <- function(region) {
rmarkdown::render(
"ReportePorRegion.Rmd",
params = list(
reg = region
),
encoding = "UTF-8",
output_file = paste0("Reporte_", region, "_", format(Sys.Date(), "%d%m%Y"), ".docx")
)
filesstrings::file.move(paste0("Reporte_", region, "_", format(Sys.Date(), "%d%m%Y"), ".docx"),
"Reportes por región/")
}
imprimir_reporte("Araucanía")
# Crear función de reporte
imprimir_reporte <- function(region) {
rmarkdown::render(
"ReportePorRegion.Rmd",
params = list(
reg = region
),
encoding = "UTF-8",
output_file = paste0("Reporte_", region, "_", format(Sys.Date(), "%d%m%Y"), ".docx")
)
#filesstrings::file.move(paste0("Reporte_", region, "_", format(Sys.Date(), "%d%m%Y"), ".docx"),
#                       "Reportes por región/")
}
imprimir_reporte("Araucanía")
imprimir_reporte(Araucanía)
rmarkdown::render(
"ReportePorRegion.Rmd",
params = list(
reg = "Araucanía"
),
encoding = "UTF-8",
output_file = paste0("Reporte_", "Araucanía", "_", format(Sys.Date(), "%d%m%Y"), ".docx")
)
# Crear función de reporte
imprimir_reporte <- function(region) {
rmarkdown::render(
"ReportePorRegion.Rmd",
params = list(
reg = region
),
encoding = "UTF-8",
output_file = paste0("Reporte_", region, "_", format(Sys.Date(), "%d%m%Y"), ".docx")
)
#filesstrings::file.move(paste0("Reporte_", region, "_", format(Sys.Date(), "%d%m%Y"), ".docx"),
#                       "Reportes por región/")
}
# Crear función de reporte
imprimir_reporte <- function(region) {
rmarkdown::render(
"ReportePorRegion.Rmd",
params = list(
reg = region
),
encoding = "UTF-8",
output_file = paste0("Reporte_", region, "_", format(Sys.Date(), "%d%m%Y"), ".docx")
)
filesstrings::file.move(paste0("Reporte_", region, "_", format(Sys.Date(), "%d%m%Y"), ".docx"),
"Reportes por región/")
}
imprimir_reporte("Araucanía")
rmarkdown::render(
"ReportePorRegion.Rmd",
params = list(
reg = "Araucanía"
),
encoding = "UTF-8",
output_file = paste0("Reporte_", "Araucanía", "_", format(Sys.Date(), "%d%m%Y"), ".docx")
)
# Crear función de reporte
imprimir_reporte <- function(region) {
rmarkdown::render(
"ReportePorRegion.Rmd",
params = list(
reg = region
),
encoding = "UTF-8",
output_file = paste0("Reporte_", region, "_", format(Sys.Date(), "%d%m%Y"), ".docx")
)
filesstrings::file.move(paste0("Reporte_", region, "_", format(Sys.Date(), "%d%m%Y"), ".docx"),
"Reportes por región/")
}
imprimir_reporte("Araucanía")
#Opciones
regiones <- c("Tarapacá"
, "Antofagasta"
, "Atacama"
, "Coquimbo"
, "O'Higgins"
, "Valparaíso"
, "Maule"
, "Biobío"
, "Araucanía"
, "Lagos"
, "Aysén"
, "Magallanes"
, "Metropolitana"
, "Ríos"
, "Arica"
, "Ñuble")
for (i in regiones){
imprimir_reporte(i)
}
install.packages("odbc")
install.packages("RSQLite")
source("Scripts/Reg.R", encoding = "UTF-8")
reg <- as.character(reg3[reg3$reg2 == params$reg, 1]) # esto facilita la impresión masiva de reportes
source("Scripts/CargarLibrerias.R", encoding = "UTF-8")
Resumen_UnidadFiscalizable <-
read_excel("../Datos/Resumen_UnidadFiscalizable.xlsx")
Datos_Instrumento <-
read_excel("../Datos/Datos_Instrumento.xlsx")
Detalle_ProcesoSancionUnidadFiscalizable <-
read_excel("../Datos/Detalle_ProcesoSancionUnidadFiscalizable.xlsx")
Datos_Sancion <-
read_excel("../Datos/Datos_Sancion.xlsx")
Datos_Sancion <- Datos_Sancion %>%
mutate(RegionSelect = case_when(
Region == reg ~ reg,
TRUE ~ "Resto de las Regiones"))
# Datos: UF por región
UF_reg <- Resumen_UnidadFiscalizable %>% filter(RegionNombre == reg)
resumen_reg <- Resumen_UnidadFiscalizable %>%
group_by("Región" = RegionNombre) %>%
summarise(UFs = n()) %>%
arrange(desc(UFs)) %>%
ungroup() %>%
mutate(Porcentaje = round(UFs/sum(UFs)*100,1),
Destacar = case_when(`Región` == reg ~ "Si",
is.na(`Región`) ~ "Si2",
TRUE ~ "No"),
orden_reg = case_when(
`Región` == "Región de Arica y Parinacota" ~ 17,
`Región` == "Región de Tarapacá" ~ 16,
`Región` == "Región de Antofagasta" ~ 15,
`Región` == "Región de Atacama" ~ 14,
`Región` == "Región de Coquimbo" ~ 13,
`Región` == "Región Metropolitana" ~ 12,
`Región` == "Región de Valparaíso" ~ 11,
`Región` == "Región del Libertador General Bernardo O'Higgins" ~ 10,
`Región` == "Región del Maule" ~ 9,
`Región` == "Región de Ñuble" ~ 8,
`Región` == "Región del Biobío" ~ 7,
`Región` == "Región de la Araucanía" ~ 6,
`Región` == "Región de Los Ríos" ~ 5,
`Región` == "Región de los Lagos" ~ 4,
`Región` == "Región de Aysén del General Carlos Ibañez del Campo" ~ 3,
`Región` == "Región de Magallanes y la Antártica Chilena" ~ 2,
is.na(`Región`) ~ 1
))
Porcentaje_uf_reg <- filter(resumen_reg, `Región` == reg)[[3]]
resumen_cate <- Resumen_UnidadFiscalizable %>%
filter(RegionNombre == reg) %>%
group_by("Categoría Económica" = CategoriaEconomicaNombre) %>%
summarise(UFs = n()) %>%
arrange(desc(UFs)) %>%
ungroup() %>%
mutate(Porcentaje = round(UFs/sum(UFs)*100,1),
Destacar = case_when(is.na(`Categoría Económica`) ~ "Si",
TRUE ~ "No"))
top_RCA <- Datos_Instrumento %>%
filter(SiglaInstrumento == "RCA", #Instrumento de inter?s
NombreRegion == reg #Filtro región
#Existen RCAs "interregionales" que en "NombreRegionPoryecto" especifican región (acá se consideran)
| (NombreRegion == "Interregional" & NombreRegionProyecto == reg)) %>% # | signfica "o"
group_by(CategoriaEconomicaNombre) %>%
summarise(RCAs = n()) %>%
arrange(desc(RCAs)) %>%
top_n(5)
Datos_Instrumento %>%
filter(SiglaInstrumento == "RCA", #Instrumento de inter?s
NombreRegion == reg #Filtro región
#Existen RCAs "interregionales" que en "NombreRegionPoryecto" especifican región (acá se consideran)
| (NombreRegion == "Interregional" & NombreRegionProyecto == reg))
Datos_Instrumento
Datos_Instrumento %>%
filter(SiglaInstrumento == "RCA"
)
Datos_Instrumento %>%
filter(SiglaInstrumento == "RCA", #Instrumento de inter?s
NombreRegion == reg
)
reg
Datos_Instrumento %>% distinct(NombreRegion)
Datos_Instrumento
View(Datos_Instrumento)
read_excel("../Datos/Datos_Instrumento.xlsx")
Datos_Instrumento <-
read_excel("../Datos/Datos_Instrumento.xlsx")
Datos_Instrumento %>% distinct(NombreRegion)
Datos_Instrumento <-
read_excel("../Datos/Datos_Instrumento.xlsx")
View(Datos_Instrumento)
source('~/GitHub/Reportes-automaticos/Reporte Automático/Scripts/CargaDatos.R', echo=TRUE)
source("Scripts/ManejoDatos_UF.R", encoding = "UTF-8")
source("Scripts/ManejoDatos_FDC.R", encoding = "UTF-8")
source("Scripts/Graficos.R", encoding = "UTF-8")
uf_reg
uf_cat
top_RCA %>%
kable(format = "markdown")
source('~/GitHub/Reportes-automaticos/Reporte Automático/Scripts/CargarLibrerias.R', echo=TRUE)
source('~/GitHub/Reportes-automaticos/Reporte Automático/Scripts/CargarLibrerias.R', echo=TRUE)
source("Scripts/Reg.R", encoding = "UTF-8")
reg <- as.character(reg3[reg3$reg2 == params$reg, 1]) # esto facilita la impresión masiva de reportes
source("Scripts/CargaDatos.R", encoding = "UTF-8")
coord_uf <- Resumen_UnidadFiscalizable %>%
select("RegionNombre", "Latitud", "Longitud") %>%
filter(RegionNombre == reg, !is.na(Latitud), !is.na(Longitud))
if (reg == "Región de Aysén del General Carlos Ibáñez del Campo"){
long <- unique(coord_uf$Longitud_reg)
ltd <- unique(coord_uf$Latitud_reg)
} else {
long <- filter(centroides, Region == reg)$longitud
ltd <- filter(centroides, Region == reg)$latitud
}
centroides <- tribble(
~Region,	~latitud,	~longitud,
"Región de Arica y Parinacota",	-18.496932,	-69.62854,
"Región de Tarapacá",	-20.215794,	-69.393066,
"Región de Antofagasta",	-23.53599,	-69.119139,
"Región de Atacama",	-27.395285,	-69.910141,
"Región de Coquimbo",	-30.619033,	-70.860692,
"Región de Valparaíso",	-32.782424,	-70.959617,
"Región Metropolitana",	-33.604344,	-70.627063,
"Región del Libertador General Bernardo O'Higgins",	-34.435366,	-71.046566,
"Región del Maule",	-35.62133,	-71.445649,
"Región de Ñuble",	-36.645411,	-71.974643,
"Región del Biobío",	-37.500562,	-72.392417,
"Región de la Araucanía",	-38.649155,	-72.27425,
"Región de Los Ríos",	-40.004982,	-72.570862,
"Región de los Lagos",	-42.04281,	-72.89418,
"Región de Aysén del General Carlos Ibáñez del Campo",	-46.416524,	-73.257083,
"Región de Magallanes y la Antártica Chilena",	-52.488319,	-71.873603
)
coord_uf <- Resumen_UnidadFiscalizable %>%
select("RegionNombre", "Latitud", "Longitud") %>%
filter(RegionNombre == reg, !is.na(Latitud), !is.na(Longitud))
if (reg == "Región de Aysén del General Carlos Ibáñez del Campo"){
long <- unique(coord_uf$Longitud_reg)
ltd <- unique(coord_uf$Latitud_reg)
} else {
long <- filter(centroides, Region == reg)$longitud
ltd <- filter(centroides, Region == reg)$latitud
}
if (reg %in% c("Región de Antofagasta", "Región de Atacama", "Región de Coquimbo", "Región de los Lagos",
"Región de Aysén del General Carlos Ibáñez del Campo", "Región de Magallanes y la Antártica Chilena")){
z <- 7
} else {
z <- 8
}
leaflet(coord_uf) %>%
setView(lng = long, lat = ltd, zoom = z) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addCircleMarkers(~Longitud, ~Latitud, color = "red", weight = 1, radius = 3)
m <- leaflet(coord_uf) %>%
setView(lng = long, lat = ltd, zoom = z) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addCircleMarkers(~Longitud, ~Latitud, color = "red", weight = 1, radius = 3)
?mapshot
mapshot(m, file = "mapa.png")
mapshot(m, file = "~/mapa.png")
file.move("~/mapa.png", overwrite = TRUE)
lista_paquetes <- c("dplyr", "ggplot2", "lubridate", "tidyr", "kableExtra", "flextable", "filesstring",
"purrr", "readr", "extrafont", "stringr", "ggmap", "readxl", "leaflet", "mapview")
nuevos_paquetes <- lista_paquetes[!(lista_paquetes %in% installed.packages()[,"Package"])]
lapply(nuevos_paquetes, install.packages); lapply(lista_paquetes, require, character.only = TRUE)
rm(lista_paquetes, nuevos_paquetes)
lista_paquetes <- c("dplyr", "ggplot2", "lubridate", "tidyr", "kableExtra", "flextable", "filesstrings",
"purrr", "readr", "extrafont", "stringr", "ggmap", "readxl", "leaflet", "mapview")
nuevos_paquetes <- lista_paquetes[!(lista_paquetes %in% installed.packages()[,"Package"])]
lapply(nuevos_paquetes, install.packages); lapply(lista_paquetes, require, character.only = TRUE)
rm(lista_paquetes, nuevos_paquetes)
loadfonts()
?file.move
file.move("~/mapa.png", overwrite = TRUE)
file.move("~/mapa.png", "", overwrite = TRUE)
file.move("~/mapa.png", "Mapa/", overwrite = TRUE)
knitr::include_graphics("Mapa/mapa.png")
knitr::include_graphics("Mapa/mapa.png")
knitr::include_graphics("Mapa/mapa.png")
FDC_cate
source("Scripts/Reg.R", encoding = "UTF-8")
reg <- as.character(reg3[reg3$reg2 == params$reg, 1]) # esto facilita la impresión masiva de reportes
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE, dpi=300)
source("Scripts/CargarLibrerias.R", encoding = "UTF-8")
source("Scripts/CargaDatos.R", encoding = "UTF-8")
source("Scripts/ManejoDatos_UF.R", encoding = "UTF-8")
source("Scripts/ManejoDatos_FDC.R", encoding = "UTF-8")
source("Scripts/Graficos.R", encoding = "UTF-8")
knitr::include_graphics("Mapa/mapa.png")
uf_reg
uf_cat
top_RCA %>%
flextable() %>%
width(j = c(1, 2), width = c(1.8, 1)) %>%
font(fontname = "Calibri", part = "all") %>%
fontsize(size = 10, part = "all")
source("Scripts/Reg.R", encoding = "UTF-8")
reg <- as.character(reg3[reg3$reg2 == params$reg, 1]) # esto facilita la impresión masiva de reportes
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE, dpi=300)
source("Scripts/CargarLibrerias.R", encoding = "UTF-8")
source("Scripts/CargaDatos.R", encoding = "UTF-8")
source("Scripts/ManejoDatos_UF.R", encoding = "UTF-8")
source("Scripts/ManejoDatos_FDC.R", encoding = "UTF-8")
source("Scripts/Graficos.R", encoding = "UTF-8")
knitr::include_graphics("Mapa/mapa.png")
uf_reg
uf_cat
top_RCA %>%
flextable() %>%
width(j = c(1, 2), width = c(1.8, 1)) %>%
font(fontname = "Calibri", part = "all") %>%
fontsize(size = 10, part = "all")
fdc_reg
fdc_anio
fdc_cat
fdc_origen
fdc_estado
knitr::include_graphics("Mapa/mapa.png")
knitr::include_graphics("Mapa/mapa.png")
knitr::include_graphics("Mapa/mapa.png")
knitr::include_graphics("Mapa/mapa.png")
source("Scripts/Mapa.R", encoding = "UTF-8")
?render
imprimir_reporte <- function(x){
rmarkdown::render("ReportePorRegion.Rmd",
params = list(reg = x))
}
source('~/GitHub/Reportes-automaticos/Reporte Automático/Scripts/CargarLibrerias.R', encoding = 'UTF-8', echo=TRUE)
?walk
imprimir_reporte <- function(x){
rmarkdown::render("ReportePorRegion.Rmd",
params = list(reg = x),
output_file = paste0("Reporte_", x))
}
regiones <- c("Tarapacá", "Antofagasta", "Atacama", "Coquimbo", "O'Higgins",
"Valparaíso", "Maule", "Biobío", "Araucanía", "Lagos", "Aysén",
"Magallanes", "Metropolitana", "Ríos", "Arica", "Ñuble")
walk(regiones, imprimir_reporte)
# Definir función para generación de reportes
imprimir_reporte <- function(x){
rmarkdown::render("ReportePorRegion.Rmd",
params = list(reg = x),
output_file = paste0("Reportes/Reporte_", x))
}
# Valores que se usarán como "parámetros" (variables) del reporte
regiones <- c("Tarapacá", "Antofagasta", "Atacama", "Coquimbo", "O'Higgins",
"Valparaíso", "Maule", "Biobío", "Araucanía", "Lagos", "Aysén",
"Magallanes", "Metropolitana", "Ríos", "Arica", "Ñuble")
# Aplicar la función a cada valor de "regiones"
walk(regiones, imprimir_reporte)
# Aplicar la función a cada valor de "regiones"
walk(regiones, imprimir_reporte)
