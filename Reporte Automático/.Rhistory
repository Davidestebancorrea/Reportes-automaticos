# Cargar datos desde planillas (en este caso csv)
Resumen_UnidadFiscalizable <- read_csv("../Datos/Resumen_UnidadFiscalizable.csv")
lista_paquetes <- c("dplyr", "ggplot2", "lubridate", "tidyr", "kableExtra",
"purrr", "readr", "extrafont", "stringr", "ggmap", "readxl"); nuevos_paquetes <- lista_paquetes[!(lista_paquetes %in% installed.packages()[,"Package"])]
lista_paquetes <- c("dplyr", "ggplot2", "lubridate", "tidyr", "kableExtra",
"purrr", "readr", "extrafont", "stringr", "ggmap", "readxl"); nuevos_paquetes <- lista_paquetes[!(lista_paquetes %in% installed.packages()[,"Package"])]
lapply(nuevos_paquetes, install.packages); lapply(lista_paquetes, require, character.only = TRUE); rm(lista_paquetes, nuevos_paquetes)
lista_paquetes <- c("dplyr", "ggplot2", "lubridate", "tidyr", "kableExtra",
"purrr", "readr", "extrafont", "stringr", "ggmap", "readxl"); nuevos_paquetes <- lista_paquetes[!(lista_paquetes %in% installed.packages()[,"Package"])]
lapply(nuevos_paquetes, install.packages); lapply(lista_paquetes, require, character.only = TRUE); rm(lista_paquetes, nuevos_paquetes)
loadfonts()
# Cargar datos desde planillas (en este caso csv)
Resumen_UnidadFiscalizable <- read_csv("../Datos/Resumen_UnidadFiscalizable.csv")
Resumen_ProcesoSancion <-
read_excel("../Datos/Resumen_ProcesoSancion.xlsx") %>%
select(ProcesoSancionId, Expediente, ProcesoSancionTipoNombre,
ProcesoSancionEstadoNombre, FechaInicio, FechaTermino,
ConfirmaPdC, MultaTotalUTA) %>%
mutate(AnoInicio = year(FechaInicio),
AnoExpediente = as.integer(substr(Expediente, 7, 10)))
Detalle_ProcesoSancionUnidadFiscalizable <-
read_excel("../Datos/Detalle_ProcesoSancionUnidadFiscalizable.xlsx") %>%
select(ProcesoSancionId, Nombre,
CategoriaEconomica = CategoriaEconomicaNombre,
SubCategoriaEconomica = SubCategoriaEconomicaNombre,
Comuna = ComunaNombre,
Region = RegionNombre)
Detalle_UnidadFiscalizableInstrumento <- read_csv("../Datos/Detalle_UnidadFiscalizableInstrumento.csv")
View(Detalle_UnidadFiscalizableInstrumento)
Detalle_UnidadFiscalizableInstrumento %>% names()
Detalle_UnidadFiscalizableInstrumento <- read_csv("../Datos/Detalle_UnidadFiscalizableInstrumento.csv") %>%
select(-NombreUnidadFiscalizable, -NombreProyecto, -DescripcionLarga, -DescripcionCorta)
Detalle_UnidadFiscalizableInstrumento %>% write_csv("Datos/Detalle_UnidadFiscalizableInstrumento2.csv")
Detalle_UnidadFiscalizableInstrumento %>% write_csv("Detalle_UnidadFiscalizableInstrumento2.csv")
Detalle_UnidadFiscalizableInstrumento %>% write_csv("Detalle_UnidadFiscalizableInstrumento2.csv")
Detalle_UnidadFiscalizableInstrumento <- read_csv("../Datos/Detalle_UnidadFiscalizableInstrumento2.csv")
View(Detalle_UnidadFiscalizableInstrumento)
Detalle_UnidadFiscalizableInstrumento <- read_csv("../Datos/Detalle_UnidadFiscalizableInstrumento2.csv") %>%
select(-NombreUnidadFiscalizable, -NombreProyecto, -DescripcionLarga, -DescripcionCorta, -LinkDocumentoExterno)
Detalle_UnidadFiscalizableInstrumento <- read_csv("../Datos/Detalle_UnidadFiscalizableInstrumento.csv") %>%
select(-NombreUnidadFiscalizable, -NombreProyecto, -DescripcionLarga, -DescripcionCorta, -LinkDocumentoExterno)
Detalle_UnidadFiscalizableInstrumento %>% write_csv("../Datos/Detalle_UnidadFiscalizableInstrumento2.csv")
Detalle_UnidadFiscalizableInstrumento <- read_csv("../Datos/Detalle_UnidadFiscalizableInstrumento.csv")
Detalle_UnidadFiscalizableInstrumento <- read_csv("../Datos/Detalle_UnidadFiscalizableInstrumento2.csv")
Detalle_UnidadFiscalizableInstrumento <- read_csv("../Datos/Detalle_UnidadFiscalizableInstrumento2.csv")
Detalle_UnidadFiscalizableInstrumento <- read_csv("../Datos/Detalle_UnidadFiscalizableInstrumento.csv")
Detalle_UnidadFiscalizableInstrumento %>%
filter(SiglaInstrumento == "RCA", #Instrumento de inter?s
EstadoRegistroId == 1, #Siempre considerar con tablas "Detalle"
NombreRegion == reg #Filtro región
#Existen RCAs "interregionales" que en "NombreRegionPoryecto" especifican región (acá se consideran)
| (NombreRegion == "Interregional" & NombreRegionProyecto == reg)) %>% # | signfica "o"
group_by(CategoriaEconomicaNombre)
reg <- "Región de la Araucanía"
Detalle_UnidadFiscalizableInstrumento %>%
filter(SiglaInstrumento == "RCA", #Instrumento de inter?s
EstadoRegistroId == 1, #Siempre considerar con tablas "Detalle"
NombreRegion == reg #Filtro región
#Existen RCAs "interregionales" que en "NombreRegionPoryecto" especifican región (acá se consideran)
| (NombreRegion == "Interregional" & NombreRegionProyecto == reg)) %>% # | signfica "o"
group_by(CategoriaEconomicaNombre)
Detalle_UnidadFiscalizableInstrumento %>% names()
# Cargar datos desde planillas (en este caso csv)
Resumen_UnidadFiscalizable <- read_csv("../Datos/Resumen_UnidadFiscalizable.csv")
names(Resumen_UnidadFiscalizable)
# Cargar datos desde planillas (en este caso csv)
Resumen_UnidadFiscalizable <- read_csv("../Datos/Resumen_UnidadFiscalizable.csv") %>%
select(-Nombre)
write_csv(Resumen_UnidadFiscalizable) %>% write_csv("../Datos/Resumen_UnidadFiscalizable.csv")
Resumen_UnidadFiscalizable %>% write_csv("../Datos/Resumen_UnidadFiscalizable.csv")
# Cargar datos desde planillas (en este caso csv)
Resumen_UnidadFiscalizable <- read_csv("../Datos/Resumen_UnidadFiscalizable.csv")
View(Resumen_ProcesoSancion)
select(Resumen_UnidadFiscalizable, UnidadFiscalizableId, CategoriaEconomicaNombre, RegionNombre)
2+2
select(Resumen_UnidadFiscalizable, UnidadFiscalizableId, CategoriaEconomicaNombre, RegionNombre)
Detalle_UnidadFiscalizableInstrumento %>%
left_join(
select(Resumen_UnidadFiscalizable, UnidadFiscalizableId, CategoriaEconomicaNombre, RegionNombre)
)
Datos_Instrumento <- Detalle_UnidadFiscalizableInstrumento %>%
left_join(
select(Resumen_UnidadFiscalizable, UnidadFiscalizableId, CategoriaEconomicaNombre, RegionNombre)
)
View(Datos_Instrumento)
Datos_Instrumento %>%
filter(SiglaInstrumento == "RCA", #Instrumento de inter?s
EstadoRegistroId == 1, #Siempre considerar con tablas "Detalle"
NombreRegion == reg #Filtro región
#Existen RCAs "interregionales" que en "NombreRegionPoryecto" especifican región (acá se consideran)
| (NombreRegion == "Interregional" & NombreRegionProyecto == reg)) %>% # | signfica "o"
group_by(CategoriaEconomicaNombre)
Datos_Instrumento %>%
filter(SiglaInstrumento == "RCA", #Instrumento de inter?s
EstadoRegistroId == 1, #Siempre considerar con tablas "Detalle"
NombreRegion == reg #Filtro región
#Existen RCAs "interregionales" que en "NombreRegionPoryecto" especifican región (acá se consideran)
| (NombreRegion == "Interregional" & NombreRegionProyecto == reg)) %>% # | signfica "o"
group_by(CategoriaEconomicaNombre) %>%
summarise(RCAs = n())
Datos_Instrumento %>%
filter(SiglaInstrumento == "RCA", #Instrumento de inter?s
EstadoRegistroId == 1, #Siempre considerar con tablas "Detalle"
NombreRegion == reg #Filtro región
#Existen RCAs "interregionales" que en "NombreRegionPoryecto" especifican región (acá se consideran)
| (NombreRegion == "Interregional" & NombreRegionProyecto == reg)) %>% # | signfica "o"
group_by(CategoriaEconomicaNombre) %>%
summarise(RCAs = n()) %>%
arrange(desc(RCAs)) %>%
top_n(5)
source("CargarLibrerias.R", encoding = "UTF-8")
source("Scripts/CargarLibrerias.R", encoding = "UTF-8")
source("Scripts/CargaManejoDatos.R", encoding = "UTF-8")
source("Scripts/ManejoDatos_UF.R", encoding = "UTF-8")
source("Scripts/Reg.R", encoding = "UTF-8")
source("Scripts/ManejoDatos_FDC.R", encoding = "UTF-8")
source("Scripts/ManejoDatos_FDC.R", encoding = "UTF-8")
source('~/GitHub/Reportes-automaticos/Reporte Automático/Scripts/ManejoDatos_FDC.R', encoding = 'UTF-8', echo=TRUE)
source("Scripts/CargarLibrerias.R", encoding = "UTF-8")
source("Scripts/CargaDatos.R", encoding = "UTF-8")
# Cargar datos desde planillas (en este caso csv)
Resumen_UnidadFiscalizable <- read_csv("../Datos/Resumen_UnidadFiscalizable.csv")
Detalle_UnidadFiscalizableInstrumento <- read_csv("../Datos/Detalle_UnidadFiscalizableInstrumento.csv")
Datos_Instrumento <- Detalle_UnidadFiscalizableInstrumento %>%
left_join(
select(Resumen_UnidadFiscalizable, UnidadFiscalizableId, CategoriaEconomicaNombre, RegionNombre)
)
Resumen_ProcesoSancion <-
read_excel("../Datos/Resumen_ProcesoSancion.xlsx") %>%
select(ProcesoSancionId, Expediente, ProcesoSancionTipoNombre,
ProcesoSancionEstadoNombre, FechaInicio, FechaTermino,
ConfirmaPdC, MultaTotalUTA) %>%
mutate(AnoInicio = year(FechaInicio),
AnoExpediente = as.integer(substr(Expediente, 7, 10)))
Detalle_ProcesoSancionUnidadFiscalizable <-
read_excel("../Datos/Detalle_ProcesoSancionUnidadFiscalizable.xlsx") %>%
select(ProcesoSancionId,
CategoriaEconomica = CategoriaEconomicaNombre,
SubCategoriaEconomica = SubCategoriaEconomicaNombre,
Comuna = ComunaNombre,
Region = RegionNombre)
Datos_Sancion <-
Resumen_ProcesoSancion %>%
left_join(Detalle_ProcesoSancionUnidadFiscalizable, by = "ProcesoSancionId") %>%
mutate(RegionSelect = case_when(
Region == reg ~ reg,
TRUE ~ "Resto de las Regiones"))
reg <- "Región de la Araucanía"
source("Scripts/CargaDatos.R", encoding = "UTF-8")
source("Scripts/ManejoDatos_UF.R", encoding = "UTF-8")
source("Scripts/ManejoDatos_FDC.R", encoding = "UTF-8")
source("Scripts/Mapa.R", encoding = "UTF-8")
library(readr) # librería con funciones de carga de datos optimizadas
Resumen_UnidadFiscalizable <- read_csv("../Datos/Resumen_UnidadFiscalizable.csv")
head(Resumen_UnidadFiscalizable)
library(DBI)
library(odbc)
library(RSQLite)
con <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")
dplyr::copy_to(con, Resumen_UnidadFiscalizable, "Resumen_UnidadFiscalizable",
temporary = FALSE
)
# Cargamos librerías para la conexión con motores de bases de datos
library(DBI)
library(odbc)
con <- dbConnect(odbc(),
Driver   = "SQL Server",
Server   = "ServidorX",
Database = "BBDD",
Trusted_Connection = "True",
Port     = 1433)
head(dbReadTable(con, "Resumen_UnidadFiscalizable"))
head(dplyr::tbl(con, "Resumen_UnidadFiscalizable"))
library(dplyr) # librería de manejo de datos (seleccionar, filtrar, agrupar, etc)
library(tidyr) # librería para modificación de "forma" de datos ("pivot", "unpivot")
# Generamos un nuevo data set "Resumen_UnidadFiscalizable_cuadro" luego de hacer toda la manipulación
Resumen_UnidadFiscalizable_cuadro <-
# datos originales
Resumen_UnidadFiscalizable %>%
# seleccionamos cuatro variables/columnas
select(UnidadFiscalizableId, Nombre, RegionNombre, CategoriaEconomicaNombre) %>%
# dejamos solo aquellas observaciones/filas que no tienen valores nulos para RegionNombre ni CategoriaEconomicaNombre
filter(!is.na(RegionNombre) & !is.na(CategoriaEconomicaNombre)) %>%
# Agrupamos las observaciones/filas respecto a las variables RegionNombre y CategoriaEconomicaNombre
group_by(RegionNombre, CategoriaEconomicaNombre) %>%
# Calculamos el número de filas/observaciones para cada uno de los grupos
summarise("Número de UFs" = n()) %>%
# Modificamos la forma de los datos (a "más cuadrado")
spread(CategoriaEconomicaNombre, `Número de UFs`)
library(dplyr) # librería de manejo de datos (seleccionar, filtrar, agrupar, etc)
library(tidyr) # librería para modificación de "forma" de datos ("pivot", "unpivot")
# Generamos un nuevo data set "Resumen_UnidadFiscalizable_cuadro" luego de hacer toda la manipulación
Resumen_UnidadFiscalizable_cuadro <-
# datos originales
Resumen_UnidadFiscalizable %>%
# seleccionamos cuatro variables/columnas
select(UnidadFiscalizableId, RegionNombre, CategoriaEconomicaNombre) %>%
# dejamos solo aquellas observaciones/filas que no tienen valores nulos para RegionNombre ni CategoriaEconomicaNombre
filter(!is.na(RegionNombre) & !is.na(CategoriaEconomicaNombre)) %>%
# Agrupamos las observaciones/filas respecto a las variables RegionNombre y CategoriaEconomicaNombre
group_by(RegionNombre, CategoriaEconomicaNombre) %>%
# Calculamos el número de filas/observaciones para cada uno de los grupos
summarise("Número de UFs" = n()) %>%
# Modificamos la forma de los datos (a "más cuadrado")
spread(CategoriaEconomicaNombre, `Número de UFs`)
Resumen_UnidadFiscalizable_cuadro
Resumen_UnidadFiscalizable_reg <-
# datos originales
Resumen_UnidadFiscalizable %>%
# seleccionamos cuatro variables/columnas
select(UnidadFiscalizableId, Nombre, RegionNombre, CategoriaEconomicaNombre) %>%
# dejamos solo aquellas observaciones/filas que no tienen valores nulos para RegionNombre ni CategoriaEconomicaNombre
filter(!is.na(RegionNombre) & !is.na(CategoriaEconomicaNombre)) %>%
# Agrupamos las observaciones/filas respecto a las variables RegionNombre y CategoriaEconomicaNombre
group_by(RegionNombre, CategoriaEconomicaNombre) %>%
# Calculamos el número de filas/observaciones para cada uno de los grupos
summarise("Número de UFs" = n())
Resumen_UnidadFiscalizable_reg <-
# datos originales
Resumen_UnidadFiscalizable %>%
# seleccionamos cuatro variables/columnas
select(UnidadFiscalizableId, RegionNombre, CategoriaEconomicaNombre) %>%
# dejamos solo aquellas observaciones/filas que no tienen valores nulos para RegionNombre ni CategoriaEconomicaNombre
filter(!is.na(RegionNombre) & !is.na(CategoriaEconomicaNombre)) %>%
# Agrupamos las observaciones/filas respecto a las variables RegionNombre y CategoriaEconomicaNombre
group_by(RegionNombre, CategoriaEconomicaNombre) %>%
# Calculamos el número de filas/observaciones para cada uno de los grupos
summarise("Número de UFs" = n())
library(ggplot2)
Resumen_UnidadFiscalizable_reg %>%
ggplot(aes(RegionNombre, `Número de UFs`)) +
geom_col() +
coord_flip() +
xlab("") +
ylab("")
integer <- 2
float <- 3.14
factor <- as.factor("M")
class(integer)
integer %>% str
source("Scripts/CargarLibrerias.R", encoding = "UTF-8")
source("Scripts/CargaDatos.R", encoding = "UTF-8")
openxlsx::write.xlsx("../Datos/Datos_Instrumento.xlsx")
openxlsx::write.xlsx(Datos_Instrumento,"../Datos/Datos_Instrumento.xlsx")
openxlsx::write.xlsx(Datos_Sancion,"../Datos/Datos_Sancion.xlsx")
openxlsx::write.xlsx(Detalle_ProcesoSancionUnidadFiscalizable,"../Datos/Detalle_ProcesoSancionUnidadFiscalizable2.xlsx")
source("Scripts/CargaDatos.R", encoding = "UTF-8")
Datos_Sancion <-
Resumen_ProcesoSancion %>%
left_join(Detalle_ProcesoSancionUnidadFiscalizable, by = "ProcesoSancionId")
openxlsx::write.xlsx(Datos_Sancion,"../Datos/Datos_Sancion.xlsx")
openxlsx::write.xlsx(Resumen_UnidadFiscalizable,"../Datos/Resumen_UnidadFiscalizable2.xlsx")
rm(list = ls())
source('~/GitHub/Reportes-automaticos/Reporte Automático/Scripts/CargaDatos.R')
# Crear función de reporte
imprimir_reporte <- function(region) {
rmarkdown::render(
"Reporte Automático/ReportePorRegion.Rmd",
params = list(
reg = region
),
encoding = "UTF-8",
output_file = paste0("Reporte_", region, "_", format(Sys.Date(), "%d%m%Y"), ".docx")
)
filesstrings::file.move(paste0("Reporte Automático/Reporte_", region, "_", format(Sys.Date(), "%d%m%Y"), ".docx"),
"Reporte Automático/Reportes por región/")
}
#Opciones
regiones <- c("Tarapacá"
, "Antofagasta"
, "Atacama"
, "Coquimbo"
, "O'Higgins"
, "Valparaíso"
, "Maule"
, "Biobío"
, "Araucanía"
, "Lagos"
, "Aysén"
, "Magallanes"
, "Metropolitana"
, "Ríos"
, "Arica"
, "Ñuble")
for (i in regiones){
imprimir_reporte(i)
}
rmarkdown::render(
"ReportePorRegion.Rmd",
params = list(
reg = region
),
encoding = "UTF-8",
output_file = paste0("Reporte_", region, "_", format(Sys.Date(), "%d%m%Y"), ".docx")
)
# Crear función de reporte
imprimir_reporte <- function(region) {
rmarkdown::render(
"ReportePorRegion.Rmd",
params = list(
reg = region
),
encoding = "UTF-8",
output_file = paste0("Reporte_", region, "_", format(Sys.Date(), "%d%m%Y"), ".docx")
)
filesstrings::file.move(paste0("Reporte Automático/Reporte_", region, "_", format(Sys.Date(), "%d%m%Y"), ".docx"),
"Reporte Automático/Reportes por región/")
}
# Crear función de reporte
imprimir_reporte <- function(region) {
rmarkdown::render(
"ReportePorRegion.Rmd",
params = list(
reg = region
),
encoding = "UTF-8",
output_file = paste0("Reporte_", region, "_", format(Sys.Date(), "%d%m%Y"), ".docx")
)
filesstrings::file.move(paste0("Reporte Automático/Reporte_", region, "_", format(Sys.Date(), "%d%m%Y"), ".docx"),
"Reporte Automático/Reportes por región/")
}
imprimir_reporte("Araucanía")
rmarkdown::render(
"ReportePorRegion.Rmd",
params = list(
reg = "Araucanía"
),
encoding = "UTF-8",
output_file = paste0("Reporte_", region, "_", format(Sys.Date(), "%d%m%Y"), ".docx")
)
rmarkdown::render(
"ReportePorRegion.Rmd",
params = list(
reg = "Araucanía"
),
encoding = "UTF-8",
output_file = paste0("Reporte_", "Araucanía", "_", format(Sys.Date(), "%d%m%Y"), ".docx")
)
rmarkdown::render(
"ReportePorRegion.Rmd",
params = list(
reg = "Araucanía"
),
encoding = "UTF-8",
output_file = paste0("Reporte_", "Araucanía", "_", format(Sys.Date(), "%d%m%Y"), ".docx")
)
filesstrings::file.move(paste0("Reporte Automático/Reporte_", region, "_", format(Sys.Date(), "%d%m%Y"), ".docx"),
"Reporte Automático/Reportes por región/")
install.packages("filesstrings")
filesstrings::file.move(paste0("Reporte Automático/Reporte_", region, "_", format(Sys.Date(), "%d%m%Y"), ".docx"),
"Reporte Automático/Reportes por región/")
filesstrings::file.move(paste0("Reporte Automático/Reporte_", "Araucanía", "_", format(Sys.Date(), "%d%m%Y"), ".docx"),
"Reporte Automático/Reportes por región/")
filesstrings::file.move(paste0("Reporte_", "Araucanía", "_", format(Sys.Date(), "%d%m%Y"), ".docx"),
"Reporte Automático/Reportes por región/")
paste0("Reporte_", "Araucanía", "_", format(Sys.Date(), "%d%m%Y"), ".docx")
filesstrings::file.move(paste0("Reporte_", "Araucanía", "_", format(Sys.Date(), "%d%m%Y"), ".docx"),
"Reportes por región/")
# Crear función de reporte
imprimir_reporte <- function(region) {
rmarkdown::render(
"ReportePorRegion.Rmd",
params = list(
reg = region
),
encoding = "UTF-8",
output_file = paste0("Reporte_", region, "_", format(Sys.Date(), "%d%m%Y"), ".docx")
)
filesstrings::file.move(paste0("Reporte_", region, "_", format(Sys.Date(), "%d%m%Y"), ".docx"),
"Reportes por región/")
}
imprimir_reporte("Araucanía")
# Crear función de reporte
imprimir_reporte <- function(region) {
rmarkdown::render(
"ReportePorRegion.Rmd",
params = list(
reg = region
),
encoding = "UTF-8",
output_file = paste0("Reporte_", region, "_", format(Sys.Date(), "%d%m%Y"), ".docx")
)
#filesstrings::file.move(paste0("Reporte_", region, "_", format(Sys.Date(), "%d%m%Y"), ".docx"),
#                       "Reportes por región/")
}
imprimir_reporte("Araucanía")
imprimir_reporte(Araucanía)
rmarkdown::render(
"ReportePorRegion.Rmd",
params = list(
reg = "Araucanía"
),
encoding = "UTF-8",
output_file = paste0("Reporte_", "Araucanía", "_", format(Sys.Date(), "%d%m%Y"), ".docx")
)
# Crear función de reporte
imprimir_reporte <- function(region) {
rmarkdown::render(
"ReportePorRegion.Rmd",
params = list(
reg = region
),
encoding = "UTF-8",
output_file = paste0("Reporte_", region, "_", format(Sys.Date(), "%d%m%Y"), ".docx")
)
#filesstrings::file.move(paste0("Reporte_", region, "_", format(Sys.Date(), "%d%m%Y"), ".docx"),
#                       "Reportes por región/")
}
# Crear función de reporte
imprimir_reporte <- function(region) {
rmarkdown::render(
"ReportePorRegion.Rmd",
params = list(
reg = region
),
encoding = "UTF-8",
output_file = paste0("Reporte_", region, "_", format(Sys.Date(), "%d%m%Y"), ".docx")
)
filesstrings::file.move(paste0("Reporte_", region, "_", format(Sys.Date(), "%d%m%Y"), ".docx"),
"Reportes por región/")
}
imprimir_reporte("Araucanía")
rmarkdown::render(
"ReportePorRegion.Rmd",
params = list(
reg = "Araucanía"
),
encoding = "UTF-8",
output_file = paste0("Reporte_", "Araucanía", "_", format(Sys.Date(), "%d%m%Y"), ".docx")
)
# Crear función de reporte
imprimir_reporte <- function(region) {
rmarkdown::render(
"ReportePorRegion.Rmd",
params = list(
reg = region
),
encoding = "UTF-8",
output_file = paste0("Reporte_", region, "_", format(Sys.Date(), "%d%m%Y"), ".docx")
)
filesstrings::file.move(paste0("Reporte_", region, "_", format(Sys.Date(), "%d%m%Y"), ".docx"),
"Reportes por región/")
}
imprimir_reporte("Araucanía")
#Opciones
regiones <- c("Tarapacá"
, "Antofagasta"
, "Atacama"
, "Coquimbo"
, "O'Higgins"
, "Valparaíso"
, "Maule"
, "Biobío"
, "Araucanía"
, "Lagos"
, "Aysén"
, "Magallanes"
, "Metropolitana"
, "Ríos"
, "Arica"
, "Ñuble")
for (i in regiones){
imprimir_reporte(i)
}
install.packages("odbc")
install.packages("RSQLite")
